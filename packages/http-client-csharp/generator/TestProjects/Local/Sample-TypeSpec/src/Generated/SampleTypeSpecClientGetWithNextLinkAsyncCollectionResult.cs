// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SampleTypeSpec
{
    /// <summary> SampleTypeSpecClient GetWithNextLink AsyncCollectionResult. </summary>
    internal partial class SampleTypeSpecClientGetWithNextLinkAsyncCollectionResult : AsyncCollectionResult
    {
        private readonly SampleTypeSpecClient _client;
        private readonly RequestOptions _options;

        /// <summary> Initializes a new instance of SampleTypeSpecClientGetWithNextLinkAsyncCollectionResult, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The SampleTypeSpecClient client used to send requests. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public SampleTypeSpecClientGetWithNextLinkAsyncCollectionResult(SampleTypeSpecClient client, RequestOptions options)
        {
            _client = client;
            _options = options;
        }

        /// <summary> Gets the raw pages of the collection. </summary>
        /// <returns> The raw pages of the collection. </returns>
        public override async IAsyncEnumerable<ClientResult> GetRawPagesAsync()
        {
            // Declare the initial request message - use regular CreateRequest method for initial request
            PipelineMessage message = _client.CreateListWithNextLinkRequest(_options);

            // Declare nextPageUri variable
            Uri nextPageUri = null;

            // Generate the while loop
            while (true)
            {
                ClientResult result = ClientResult.FromResponse(await _client.Pipeline.ProcessMessageAsync(message, _options).ConfigureAwait(false));

                // Yield return result
                yield return result;
                await Task.Yield();

                // Assign nextLinkUri from the result and check if it is null
                nextPageUri = ((ListWithNextLinkResponse)result).Next;
                if (nextPageUri == null)
                {
                    yield break;
                }

                // Update message for next iteration - use CreateNextXXXRequest method
                message = _client.CreateNextListWithNextLinkRequest(nextPageUri, "application/json", _options);
            }
        }

        /// <summary> Gets the continuation token from the specified page. </summary>
        /// <param name="page"></param>
        /// <returns> The continuation token for the specified page. </returns>
        public override ContinuationToken GetContinuationToken(ClientResult page)
        {
            Uri nextPage = ((ListWithNextLinkResponse)page).Next;
            if (nextPage != null)
            {
                return ContinuationToken.FromBytes(BinaryData.FromString(nextPage.AbsoluteUri));
            }
            return null;
        }
    }
}